class Pair{
    Node node;
    int hd;
    Pair(Node node, int hd){
        this.node = node;
        this.hd = hd;
    }
}

class Solution {
    public ArrayList<Integer> topView(Node root) {
        
        Queue<Pair> q = new LinkedList<>();
        HashMap<Integer, Node> map = new HashMap<>();
        
        int min=0, max=0;
        q.add(new Pair(root, 0));
        q.add(null);
        
        while(!q.isEmpty()){
            Pair curr = q.remove();
            if(curr == null){
                if(q.isEmpty()) break;
                else{
                    q.add(null);
                }
            }
            else{
                if(!map.containsKey(curr.hd)){
                    map.put(curr.hd, curr.node);
                }
                
                if(curr.node.left != null){
                    q.add(new Pair(curr.node.left, curr.hd-1));
                    min = Math.min(min, curr.hd-1);
                }
                if(curr.node.right != null){
                    q.add(new Pair(curr.node.right, curr.hd+1));
                    max = Math.max(max, curr.hd+1);
                }
            }
        }
        ArrayList<Integer> li = new ArrayList<>();
        for(int i=min; i<=max; i++){
            li.add(map.get(i).data);
        }
        
        return li;
    }
}
