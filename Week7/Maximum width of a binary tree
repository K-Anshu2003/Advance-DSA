class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;

        Deque<Pair<TreeNode, Integer>> q = new LinkedList<>();
        q.offer(new Pair<>(root, 0));

        int maxWidth = 0;

        while(!q.isEmpty()){
            int size = q.size();
            int left = q.peekFirst().getValue();
            int right = q.peekLast().getValue();

            maxWidth = Math.max(maxWidth, right-left+1);

            for(int i=0; i<size; i++){
                Pair<TreeNode, Integer> p = q.poll();
                TreeNode node = p.getKey();
                int idx = p.getValue();

                if(node.left != null){
                    q.offer(new Pair<>(node.left, 2*idx+1));
                }

                if(node.right != null){
                    q.offer(new Pair<>(node.right, 2*idx+2));
                }
            }
        }
        return maxWidth;
    }
}
