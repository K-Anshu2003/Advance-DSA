//optimal approach

class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int n = nums.length;

        int product = 1;
        int left = 0;
        int count = 0;
        if(k<=1) return 0;
        for(int right=0; right<n; right++){
            product *= nums[right];


            while(product >= k && left < nums.length){
                product /= nums[left];
                left++;
            }
            count += right-left+1;

        }
        return count;
    }

}





//Brute force approach
class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int n = nums.length;
        int count = 0;

        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                List<Integer> li = new ArrayList<>();
                int product = 1;
                for(int m=i; m<=j; m++){
                    li.add(nums[m]);
                }
                for(int l : li){
                    product *= l;
                }
                if(product < k){
                    count++;
                }else{
                    break;
                }
            }
        }
        return count;
    }
}
