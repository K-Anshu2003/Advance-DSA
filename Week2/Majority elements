//Special algorithm (Moore's voting algorithm)
class Solution{
    public int majorityElement(int[] nums){
        int n = nums.length;
        int candidate = nums[0];
        int vote = 1;

        for(int i=1; i<n; i++){
            if(candidate == nums[i]){
                vote++;
            }else{
                vote--;
            }
            if(vote == 0){
                candidate = nums[i];
                vote = 1;
            }
        }
        return candidate;
    }
}


//basic approach
class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);

        return nums[n/2];
    }
}


//using key value pair (hashMap)
class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;

        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i=0; i<n; i++){
            map.put(nums[i], map.getOrDefault(nums[i], 0)+1);
            if(map.get(nums[i]) > n/2)
                return nums[i];
        }  
        return -1;
    }
}

