//Sliding window approach

class Solution {
    public int maxSubarraySum(int[] arr, int k) {
        int n = arr.length;
        int currSum = 0;
        int maxSum = 0;
        
        int i=0;
        
        for(; i<=k-1; i++){
            currSum += arr[i];
            
        }
        maxSum = currSum;
        for(int j=1; j<=n-k; j++){
            
            int newele = arr[j+k-1];
            int oldele = arr[j-1];
            
            currSum = currSum+newele-oldele;
            maxSum = Math.max(maxSum, currSum);
        }
        return maxSum;
    }
}

// time complexity=o(n*k)

/*int n = arr.length;
int currSum = 0, maxSum = 0;
        
for(int i=0; i<=n-k; i++){
    for(int j=i; j<=i+k-1; j++){
        currSum += arr[j];
    }
            
    if(currSum > maxSum) maxSum = currSum;
        currSum = 0;
    }
}
return maxSum;*/
