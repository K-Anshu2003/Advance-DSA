class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {

        int n = nums.length;
        if (n == 0 || k == 0) return new int[0];
        int[] res = new int[n - k + 1];
        Deque<Integer> dq = new ArrayDeque<>(); // stores indices, values in decreasing order

        for (int i = 0; i < n; i++) {
            // remove indices out of the window
            if (!dq.isEmpty() && dq.peekFirst() <= i - k) dq.pollFirst();

            // maintain decreasing deque by value
            while (!dq.isEmpty() && nums[dq.peekLast()] <= nums[i]) dq.pollLast();

            dq.offerLast(i);

            // record answer once first window is formed
            if (i >= k - 1) res[i - (k - 1)] = nums[dq.peekFirst()];
        }
        return res;

    }
}
