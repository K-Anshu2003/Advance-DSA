//prefix array approach

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int ans = 0;

        int[] leftmax = new int[n];
        int[] rightmax = new int[n];

        leftmax[0] = height[0];
        rightmax[n-1] = height[n-1];

        for(int i=1; i<n; i++){
            leftmax[i] = Math.max(leftmax[i-1], height[i]);
        }

        for(int i=n-2; i>=0; i--){
            rightmax[i] = Math.max(rightmax[i+1], height[i]);
        }

        for(int i=0; i<n; i++){
            ans += Math.min(leftmax[i], rightmax[i]) - height[i];
        }
        return ans;
    }
}


// two pointer approach

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int ans = 0;

        int l=0, r=n-1;
        int lmax = 0, rmax = 0;

        while(l<r){
            lmax = Math.max(lmax, height[l]);
            rmax = Math.max(rmax, height[r]);

            if(lmax < rmax){
                ans += lmax-height[l];
                l++;
            }else{
                ans += rmax-height[r];
                r--;
            }
        }
        return ans;
    }
}



